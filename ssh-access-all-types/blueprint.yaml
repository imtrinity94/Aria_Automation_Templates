#--------------------------------------------------------#
#                     Spas Kaloferov                     #
#                   www.kaloferov.com                    #
# bit.ly/The-Twitter      Social     bit.ly/The-LinkedIn #
# bit.ly/The-Gitlab        Git         bit.ly/The-Github #
# bit.ly/The-BSD         License          bit.ly/The-GNU #
#--------------------------------------------------------#
info: |-
  #
  #       VMware Cloud Assembly Blueprint Code Sample          
  # 
  # [Info]
  #  - Blueprint to test all types of remoteAccess. 
  #  - Includes  also access via cloudConfig 
  #
name: SSH Access (All Types)
version: 1
#-------------------------INPUTS-------------------------#
inputs:
  image:
    type: string
    enum:
      - centos-74-image
      - centos-74-livefire-image
    default: centos-74-livefire-image
    description: Select image
    title: Image
  size:
    type: string
    enum:
      - micro
      - small
    default: micro
    description: Select the size of the deployment.
    title: Flavour (Size)
  region:
    type: string
    oneOf:
      - title: Development
        const: 'cas.cloud.zone.env:dev'
      - title: Test
        const: 'cas.cloud.zone.env:test'
      - title: Prodiction
        const: 'cas.cloud.zone.env:prod'
    default: 'cas.cloud.zone.env:dev'
    description: 'Select the development, testing, or production environment .'
    title: Environment
  cloudZone:
    type: string
    oneOf:
      - title: AWS
        const: 'cas.cloud.account.source:aws'
      - title: Azure
        const: 'cas.cloud.account.source:azure'
      - title: GCP
        const: 'cas.cloud.account.source:gcp'
    default: 'cas.cloud.account.source:aws'
    description: Select Public CLoud.
    title: Cloud
  availabilityZone:
    type: string
    oneOf:
      - title: a
        const: 'cas.cloud.zone.compute:a'
      - title: b
        const: 'cas.cloud.zone.compute:b'
      - title: c
        const: 'cas.cloud.zone.compute:c'
    default: 'cas.cloud.zone.compute:a'
    description: Select Availability Zone.
    title: Availability Zone
#-------------------------RESOURCES-------------------------#
resources:
  app-public-net:
    type: Cloud.Network
    properties:
      tags:
        - value: class-delivery
          key: cas-resource-desc
        - value: '${env.requestedBy}'
          key: cas-resource-owner
      name: app-public-net
      networkType: existing
      constraints:
        - tag: 'cas.network.type:public'
  vm_ssh_kpn:
    type: Cloud.Machine
    properties:
      tags:
        - value: class-delivery
          key: cas-resource-desc
        - value: '${env.requestedBy}'
          key: cas-resource-owner
      constraints:
        - tag: '${input.availabilityZone}'
        - tag: '${input.cloudZone}'
        - tag: '${input.region}'
      name: vm-ssh-kpn
      flavor: '${input.size}'
      image: '${input.image}'
      networks:
        - name: '${resource["app-public-net"].name}'
          network: '${resource["app-public-net"].id}'
      remoteAccess:
        keyPair: <<<ENTER HERE>>> # AWS Key Pair Name
        authentication: keyPairName
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
        runcmd:
         - sudo -s
         - cd /etc/
         - mkdir livefire
  vm_ssh_ppk:
    type: Cloud.Machine
    properties:
      tags:
        - value: class-delivery
          key: cas-resource-desc
        - value: '${env.requestedBy}'
          key: cas-resource-owner
      constraints:
        - tag: '${input.availabilityZone}'
        - tag: '${input.cloudZone}'
        - tag: '${input.region}'
      name: vm-ssh-ppk
      flavor: '${input.size}'
      image: '${input.image}'
      networks:
        - name: '${resource["app-public-net"].name}'
          network: '${resource["app-public-net"].id}'
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: ssh-rsa <<<ENTER HERE>>>
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
        runcmd:
         - sudo -s
         - cd /etc/
         - mkdir livefire
  vm_ssh_gkp:
    type: Cloud.Machine
    properties:
      tags:
        - value: class-delivery
          key: cas-resource-desc
        - value: '${env.requestedBy}'
          key: cas-resource-owner
      constraints:
        - tag: '${input.availabilityZone}'
        - tag: '${input.cloudZone}'
        - tag: '${input.region}'
      name: vm-ssh-gkp
      flavor: '${input.size}'
      image: '${input.image}'
      networks:
        - name: '${resource["app-public-net"].name}'
          network: '${resource["app-public-net"].id}'
      remoteAccess:
        authentication: generatedPublicPrivateKey
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
        runcmd:
         - sudo -s
         - cd /etc/
         - mkdir livefire
  vm_ssh_upw:
    type: Cloud.Machine
    properties:
      tags:
        - value: class-delivery
          key: cas-resource-desc
        - value: '${env.requestedBy}'
          key: cas-resource-owner
      constraints:
        - tag: '${input.availabilityZone}'
        - tag: '${input.cloudZone}'
        - tag: '${input.region}'
      name: vm-ssh-upw
      flavor: '${input.size}'
      image: '${input.image}'
      networks:
        - name: '${resource["app-public-net"].name}'
          network: '${resource["app-public-net"].id}'
      remoteAccess:
        authentication: usernamePassword
        username: vmware
        password: VMware1!
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
        runcmd:
         - sudo -s
         - cd /etc/
         - mkdir livefire     
  vm_ssh_cc:
    type: Cloud.Machine
    properties:
      tags:
        - value: class-delivery
          key: cas-resource-desc
        - value: '${env.requestedBy}'
          key: cas-resource-owner
      constraints:
        - tag: '${input.availabilityZone}'
        - tag: '${input.cloudZone}'
        - tag: '${input.region}'
      name: vm-ssh-cc
      flavor: '${input.size}'
      image: '${input.image}'
      networks:
        - name: '${resource["app-public-net"].name}'
          network: '${resource["app-public-net"].id}'
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
        users:
          - name: vmware
            groups: [ wheel ]
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            password: VMware1!
            chpasswd: {expire: False}
            shell: /bin/bash
            ssh-authorized-keys: 
            - ssh-rsa <<<ENTER HERE>>>
        runcmd:
         - sudo -s
         - cd /etc/
         - mkdir livefire   
